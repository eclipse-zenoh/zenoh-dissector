#
# Copyright (c) 2023 ZettaScale Technology
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors:
#   ZettaScale Zenoh Team, <zenoh@zettascale.tech>
#
name: CI (Windows)

on:
  workflow_call:

env:
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  WIRESHARK_VERSION: 4.4
  CHOCO_WIRESHARK_VERSION: 4.4.5
  # NOTE: Use a pre-built wireshark library to speed up. This requires a manual installation.
  # WIRESHARK_LIB_DIR: C:\Development\wireshark-4.4.0

jobs:
  check:
    name: Run checks on Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Update Stable Rust toolchain
        run: rustup update stable

      - name: Setup rust-cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-bin: false

      - name: Install dependencies
        run: |
          $installed = (choco list -l -r --id-only) -join " "
          $install_list = @("xsltproc", "docbook-bundle", "nsis", "winflexbison3", "cmake", "7zip", "pkgconfiglite")
          ForEach ($pkg in $install_list.split(" ")) {
            if (-Not ($installed.contains($pkg))) {
              choco install -y --force --no-progress $pkg
            }
          }
          choco install -y --no-progress wireshark --version ${{ env.CHOCO_WIRESHARK_VERSION }}

      # # WARN: Wireshark building seems to fail on Python 3.13
      # # WARN: Use python"3" according to https://stackoverflow.com/a/74408229
      # - name: Install Python if needed
      #   run: try { python -V } catch { choco install --force --no-progress python3 --version=3.11 }

      - name: Code format check
        run: cargo fmt -- --check

      - name: Bindgen Test
        run: cargo build -F bindgen

      - name: Clippy
        run: cargo clippy --all-targets --all-features -- --deny warnings

      - name: Build
        run: cargo build

      - name: Place the plugin
        run: |
          $epan_dir = "$Env:APPDATA\Wireshark\plugins\${{ env.WIRESHARK_VERSION }}\epan"
          if (-Not (Test-Path $epan_dir)) {
            mkdir -p $epan_dir
          }
          cp .\target\debug\zenoh_dissector.dll $epan_dir

      - name: Test the sample data
        run: |
          & 'C:\Program Files\Wireshark\tshark.exe' -r .\assets\sample-data.pcap
          if((& 'C:\Program Files\Wireshark\tshark.exe' -r .\assets\sample-data.pcap | Select-String -pattern "zenoh").length -ne 7) {return 1}
